APIについてとか開発メモとかそういうのまとめるようノート

利用予定API
    変更があれば追記をお願いします。

飲食店検索
楽天レシピカテゴリAPI
https://webservice.rakuten.co.jp/documentation/recipe-category-list
リクルート hot pepper API
https://webservice.recruit.co.jp/doc/hotpepper/reference.html

レシピ検索
楽天レシピカテゴリAPI
https://webservice.rakuten.co.jp/documentation/recipe-category-list
楽天レシピカテゴリ別ランキングAPI
https://webservice.rakuten.co.jp/documentation/recipe-category-ranking



簡易開発フロー

ユーザーからの入力を受け取る処理　レシピ飲食共通
　担当者　前野、川田
    ・ここの担当に出力も任せたいかも？きつかったら分担で
    ・スロットから変数に起こす
    ・条件分岐してここにこの処理呼び出すとかも決められるといいかも
    ・APIを複数使う場合処理の間で混じってくる

API入出力処理作成
　担当者　飲食店：林　レシピ：木村
    ・APIのURLにリクエストを送るコードと
    ・レスポンスを処理できるように加工するコードを書く。
    ・複数回書くことになるかも。それぞれのAPI別で担当を分けるといいかも

APIの結果をユーザーに出力する処理　レシピ飲食共通
　担当者　前野、川田
    ・処理で出来上がった結果をユーザーあてに返却するコードを書く。
    ・APIを複数使う場合処理の間で混じってくる

最終的に上で作ったコードを連結
　担当者　未定
    →　ここまでを個別テストできるよう分離して作る
    ・テストのときは想定される入力を適当に作ってテストしてください。
    　例：APIの準備が整うまでは、サンプルやテストフォームからの結果をコピペして使う等
    →　実際にLineに投げるのは一段落ついたタイミングとかで適宜やる。

注意など
    ・連結をスムーズに行うために、XMLやjsonなどの書式を統一しよう。
    →　統一できなければ、同じように扱えるように変換するプログラムを作ろう。
    ・報告連絡相談を怠らないようにしよう。
    ・コードを書く前や、一段落ついたときにはFetch, Pull, Commitをしよう。
    ・Pushの前にはきちんと動くか確認しよう。



Gitについて　間違えてたら訂正して。正直吉本くんもふんわりとしかわからん。
    Commit　コミット　：　ローカル環境で変更を決定。
    Push　プッシュ　：　リポジトリにCommitで残した変更をアップロード。
    Fetch　フェッチ　：　リポジトリの更新を確認。
    Pull　プル　：　リポジトリの変更をダウンロード保存。
    Branch　ブランチ　：　開発の変更がぶつからないように枝分かれさせる機能。
    Merge　マージ　：　枝分かれした状況を合体させる。
    Pull Request　プルリクエスト　：　合体させますけど大丈夫ですか？見てくださいね？っていうリクエスト。

プログラミング作業について
    ペアプログラミングをVSコードでできるらしいです。やってみたければどうぞ。他の方法ググったほうがええかもしれんけど。
    https://dev.classmethod.jp/articles/visual-studio-live-share-pairprograming/